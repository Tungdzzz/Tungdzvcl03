import socket
import threading
import concurrent.futures
import time
import datetime
import requests
import psutil
from tqdm import tqdm
import sys
import os
import errno
import json

# --- C·∫•u h√¨nh ---
DEFAULT_MAX_PORT = 1024
# DEFAULT_MAX_PORT = 65535
DEFAULT_TIMEOUT_SOCKET = 0.5
DEFAULT_MAX_THREADS = 100
DEFAULT_SCAN_TYPE = "TCP_CONNECT"

# --- Banner R·ªìng ---
DRAGON_BANNER = r"""
                                                       ,--.
                                                      {    }
                                                      K,   }
                                                     /  `Y`
                                                _   /   /
                                               {_'-K.__/
                                                 `/-.__L._
                                                 /  ' /`\_}
                                                /  ' /     --.
                                               (`    `.      //
                                                `     )     //
                                               (      (     /)
                                                `      `    (
                                                  `  |    @ )
                                                   |      _@
                                                  |      /
                                                 |    |
                                                 |    /
                                                 |   /
                                                 (  (
                                                  `  '.
                                                   `   '.
                                                 `    '.
                                                  `     '.
                                                   `      '.
                                                 .        `
                                                .           `
                                               .             `
                                              .               `
                                             .                 `
                                            .                   `
                                           .                     `
                                          .                       .
              ____                       .                         .
     ___----~~    ~~----___             .                           .
~~~ ~~~                ~~~ ~~~----------                           .
                               ..                                  .`
                             .'  `                                   `
                            .     .                                 `
                           .    .'                                  `
                           .   .                                    `
                          .   .                                     `
                          .  .                                      `
                         .  .                                       `
                         . .                                        `
                        . .                                         `
                        ..                                          `
                       .                                            `
                      .                                             `
                     .                                              `
                    .                                               `
                   .                                                `
          ULTIMATE PORT ASSURANCE SUITE by @atty525 - DRACONIC MAJESTY EDITION
"""

def display_intro_animation():
    text_to_flash = "@atty525"
    duration = 1.5
    interval = 0.075

    rainbow_colors_bg = [
        "\033[48;2;255;0;0m",    # Red BG
        "\033[48;2;255;165;0m",  # Orange BG
        "\033[48;2;255;255;0m",  # Yellow BG
        "\033[48;2;0;255;0m",    # Green BG
        "\033[48;2;0;0;255m",    # Blue BG
        "\033[48;2;75;0;130m",   # Indigo BG
        "\033[48;2;238;130;238m",# Violet BG
    ]
    # Flashing text color (e.g., bright white or black, depending on BG for contrast)
    text_color_bright = "\033[97;1m" # Bright White
    text_color_dark = "\033[30;1m" # Bright Black for light backgrounds like yellow

    reset_format = "\033[0m"
    start_time = time.time()
    color_idx = 0
    visible = True

    try:
        terminal_width = os.get_terminal_size().columns
    except OSError: # Fallback if running in a non-terminal environment
        terminal_width = 80 
        
    padding = " " * ((terminal_width - len(text_to_flash) - 2) // 2) # -2 for spaces around text

    num_steps = int(duration / interval)

    for _ in range(num_steps):
        if time.time() - start_time > duration:
            break

        current_bg_color = rainbow_colors_bg[color_idx % len(rainbow_colors_bg)]
        
        # Choose text color for contrast
        # Simple heuristic: if background is yellow, use dark text. Otherwise bright.
        txt_color = text_color_dark if "255;255;0m" in current_bg_color else text_color_bright

        if visible:
            display_string = f"{padding}{current_bg_color}{txt_color} {text_to_flash} {reset_format}{padding}"
            sys.stdout.write(f"\r{display_string.ljust(terminal_width)}")
        else:
            sys.stdout.write(f"\r{' ' * terminal_width}")
        
        sys.stdout.flush()
        
        visible = not visible
        if visible: # Change color when it's about to become visible again
            color_idx += 1
            
        time.sleep(interval)

    sys.stdout.write(f"\r{' ' * terminal_width}\r") 
    sys.stdout.flush()
    # os.system('cls' if os.name == 'nt' else 'clear') # Optional: Clear screen

def display_banner():
    print("\033[95m" + DRAGON_BANNER + "\033[0m")

def get_ip_info(ip_address):
    print("\033[1;34m[i] ƒêang th·ª±c hi·ªán truy v·∫•n D·ªØ li·ªáu ƒê·ªãnh danh M·∫°ng N√¢ng cao...\033[0m")
    try:
        response = requests.get(f"http://ip-api.com/json/{ip_address}?fields=status,message,country,countryCode,regionName,city,zip,lat,lon,timezone,isp,org,as,query,reverse")
        response.raise_for_status()
        data = response.json()
        if data['status'] == 'success':
            print("\033[94m" + f"[üåê] H·ªì s∆° Chi ti·∫øt v·ªÅ Th·ª±c th·ªÉ M·∫°ng [{data.get('query', ip_address)}]:" + "\033[0m")
            print(f"  üó∫Ô∏è  Khu v·ª±c ƒê·ªãa l√Ω ƒê·ªãnh v·ªã: {data.get('city', 'Kh√¥ng ti·∫øt l·ªô')}, {data.get('regionName', 'Kh√¥ng ti·∫øt l·ªô')}, {data.get('country', 'B·∫£o m·∫≠t')} ({data.get('countryCode', 'N/A')})")
            print(f"  üìç T·ªça ƒë·ªô ∆Ø·ªõc l∆∞·ª£ng (Latitude/Longitude): {data.get('lat', 'N/A')} / {data.get('lon', 'N/A')}")
            print(f"  üï∞Ô∏è M√∫i gi·ªù Ho·∫°t ƒë·ªông: {data.get('timezone', 'Kh√¥ng x√°c ƒë·ªãnh')}")
            print(f"  üì° ƒê∆°n v·ªã Cung c·∫•p D·ªãch v·ª• Li√™n k·∫øt M·∫°ng (ISP): {data.get('isp', 'Kh√¥ng x√°c ƒë·ªãnh')}")
            print(f"  üè¢ T·ªï ch·ª©c ƒêi·ªÅu h√†nh Ch√≠nh: {data.get('org', 'Kh√¥ng x√°c ƒë·ªãnh')}")
            print(f"  üè∑Ô∏è S·ªë hi·ªáu H·ªá th·ªëng T·ª± qu·∫£n (AS - Autonomous System): {data.get('as', 'N/A')}")
            if data.get('reverse'):
                print(f"  üîÑ ƒê·ªãnh danh Ph√¢n gi·∫£i Ng∆∞·ª£c (rDNS): {data.get('reverse')}")
            print("-" * 70)
            return data
        else:
            print(f"\033[91m[‚ö†Ô∏è] Th·∫•t b·∫°i trong vi·ªác thu th·∫≠p d·ªØ li·ªáu ƒë·ªãnh danh cho {ip_address}: {data.get('message', 'S·ª± c·ªë kh√¥ng x√°c ƒë·ªãnh')}\033[0m")
            return None
    except requests.exceptions.RequestException as e:
        print(f"\033[91m[‚ùå] S·ª± c·ªë trong Giao th·ª©c Truy·ªÅn th√¥ng v·ªõi D·ªãch v·ª• Ph√¢n gi·∫£i IP: {e}\033[0m")
        return None
    except Exception as e:
        print(f"\033[91m[üí•] Ngo·∫°i l·ªá kh√¥ng l∆∞·ªùng tr∆∞·ªõc x·∫£y ra trong qu√° tr√¨nh truy v·∫•n th√¥ng tin IP: {e}\033[0m")
        return None

def check_port_tcp_connect(target_ip, port, timeout):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(timeout)
            result = sock.connect_ex((target_ip, port))
            if result == 0:
                return port, "OPEN", None
            elif result == errno.ECONNREFUSED:
                return port, "CLOSED", None
            elif result == errno.ETIMEDOUT or result == errno.EHOSTUNREACH or result == errno.ENETUNREACH:
                return port, "FILTERED", None
            return port, "FILTERED", f"M√£ l·ªói h·ªá th·ªëng: {result}"
    except socket.timeout:
        return port, "FILTERED", "V∆∞·ª£t ng∆∞·ª°ng th·ªùi gian ch·ªù k·∫øt n·ªëi"
    except socket.error as e:
        return port, "FILTERED", f"L·ªói Socket: {e.strerror}"
    return port, "UNKNOWN", "Tr·∫°ng th√°i kh√¥ng x√°c ƒë·ªãnh do l·ªói b·∫•t ng·ªù"

def get_service_banner(target_ip, port, timeout):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(timeout)
            s.connect((target_ip, port))
            if port == 80 or port == 8080: # HTTP
                s.sendall(b"HEAD / HTTP/1.1\r\nHost: " + target_ip.encode() + b"\r\nUser-Agent: PortScanner\r\nConnection: close\r\n\r\n")
            elif port == 21: # FTP
                 pass # FTP banner is usually sent on connect
            elif port == 22: # SSH
                 pass # SSH banner is usually sent on connect
            
            banner_bytes = s.recv(1024)
            # C·ªë g·∫Øng decode v·ªõi nhi·ªÅu encoding ph·ªï bi·∫øn n·∫øu UTF-8 th·∫•t b·∫°i
            encodings_to_try = ['utf-8', 'latin-1', 'ascii']
            banner_str = None
            for enc in encodings_to_try:
                try:
                    banner_str = banner_bytes.decode(enc).strip()
                    break 
                except UnicodeDecodeError:
                    continue
            return banner_str if banner_str else "[D·ªØ li·ªáu nh·ªã ph√¢n ho·∫∑c kh√¥ng th·ªÉ gi·∫£i m√£]"
    except socket.timeout:
        return "[Timeout khi thu th·∫≠p banner]"
    except socket.error:
        return "[L·ªói socket khi thu th·∫≠p banner]"
    except Exception:
        return "[Kh√¥ng th·ªÉ thu th·∫≠p banner]"
    return None


def get_system_stats():
    cpu_usage = psutil.cpu_percent(interval=None)
    ram_usage = psutil.virtual_memory().percent
    return f"CPU: {cpu_usage:.1f}% Hi·ªáu su·∫•t | RAM: {ram_usage:.1f}% Ph√¢n b·ªï"

def port_scanner(target_ip, start_port=1, end_port=DEFAULT_MAX_PORT, scan_type=DEFAULT_SCAN_TYPE, timeout=DEFAULT_TIMEOUT_SOCKET, num_threads=DEFAULT_MAX_THREADS):
    scan_results = {
        "target_entity": target_ip,
        "scan_initiation_timestamp": datetime.datetime.now().isoformat(),
        "scan_protocol_type": scan_type,
        "port_enumeration_scope": f"{start_port}-{end_port}",
        "per_port_timeout_threshold": timeout,
        "concurrent_threads_deployed": num_threads,
        "enumerated_ports_details": []
    }
    
    ports_to_scan = list(range(start_port, end_port + 1))
    total_ports = len(ports_to_scan)
    
    print(f"\033[93m[üöÄ] Kh·ªüi ƒë·ªông Chi·∫øn d·ªãch ThƒÉm d√≤ To√†n di·ªán {total_ports} C·ªïng D·ªãch v·ª• tr√™n Th·ª±c th·ªÉ M·∫°ng {target_ip} (Ph·∫°m vi: {start_port} ƒë·∫øn {end_port}).\033[0m")
    print(f"\033[93m[‚öôÔ∏è] √Åp d·ª•ng K·ªπ thu·∫≠t: {scan_type}. Huy ƒë·ªông t·ªëi ƒëa {num_threads} lu·ªìng x·ª≠ l√Ω song song. Ng∆∞·ª°ng ch·ªù nghi√™m ng·∫∑t: {timeout} gi√¢y/c·ªïng.\033[0m")
    
    start_time_scan_process = time.time()
    
    timestamp_str = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
    safe_target_ip = target_ip.replace('.', '_').replace(':', '_')
    output_base_filename = f"report_scan_{safe_target_ip}_{scan_type.lower()}_{timestamp_str}"
    output_txt_filename = output_base_filename + ".txt"
    output_json_filename = output_base_filename + ".json"

    open_ports_details = []
    closed_ports_count = 0
    filtered_ports_count = 0

    try:
        with open(output_txt_filename, "w", encoding="utf-8") as f_txt:
            f_txt.write(f"B√ÅO C√ÅO TH·∫®M ƒê·ªäNH C·ªîNG D·ªäCH V·ª§\n")
            f_txt.write(f"Th·ª±c th·ªÉ M·ª•c ti√™u: {target_ip}\n")
            f_txt.write(f"Th·ªùi ƒëi·ªÉm Kh·ªüi t·∫°o: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S %Z')}\n")
            f_txt.write(f"Ph∆∞∆°ng th·ª©c ThƒÉm d√≤: {scan_type}\n")
            f_txt.write(f"Ph·∫°m vi C·ªïng Kh·∫£o s√°t: {start_port}-{end_port}\n")
            f_txt.write(f"Ng∆∞·ª°ng Ch·ªù/C·ªïng: {timeout}s, S·ªë Lu·ªìng ƒê·ªìng th·ªùi: {num_threads}\n")
            f_txt.write("=" * 70 + "\n\nK·∫æT QU·∫¢ CHI TI·∫æT:\n")

            with concurrent.futures.ThreadPoolExecutor(max_workers=num_threads) as executor:
                progress_bar_desc = f"ƒêang th·∫©m ƒë·ªãnh {scan_type}"
                with tqdm(total=total_ports, unit="c·ªïng", dynamic_ncols=True, bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}{postfix}]", desc=progress_bar_desc) as pbar:
                    
                    future_to_port = {}
                    if scan_type == "TCP_CONNECT":
                        future_to_port = {executor.submit(check_port_tcp_connect, target_ip, port, timeout): port for port in ports_to_scan}
                    else:
                        print(f"\033[91m[‚ùóÔ∏è] K·ªπ thu·∫≠t qu√©t '{scan_type}' hi·ªán ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£ trong phi√™n b·∫£n n√†y.\033[0m")
                        return scan_results

                    for i, future in enumerate(concurrent.futures.as_completed(future_to_port)):
                        port_num = future_to_port[future]
                        try:
                            scanned_port, status, details = future.result()
                            port_info = {"port_number": scanned_port, "disposition": status, "diagnostic_details": details, "service_identification_banner": None}

                            if status == "OPEN":
                                service_banner = get_service_banner(target_ip, scanned_port, timeout + 0.5)
                                port_info["service_identification_banner"] = service_banner
                                open_ports_details.append(port_info)
                                
                                banner_display = f" - Nh·∫≠n di·ªán S∆° b·ªô: {service_banner[:50].replace(chr(10), '; ').replace(chr(13), '')}{'...' if service_banner and len(service_banner) > 50 else ''}" if service_banner else ""
                                message_txt = f"[+] C·ªïng {scanned_port:<5} TR·∫†NG TH√ÅI: KH·∫¢ D·ª§NG (OPEN){banner_display}\n"
                                pbar.write(f"\033[92m[üîë] C·ªïng {target_ip}:{scanned_port:<5} KH·∫¢ D·ª§NG.{banner_display}\033[0m")
                                f_txt.write(message_txt)
                                f_txt.flush()
                            elif status == "CLOSED":
                                closed_ports_count += 1
                                f_txt.write(f"[-] C·ªïng {scanned_port:<5} TR·∫†NG TH√ÅI: T·ª™ CH·ªêI (CLOSED)\n")
                            elif status == "FILTERED":
                                filtered_ports_count += 1
                                f_txt.write(f"[?] C·ªïng {scanned_port:<5} TR·∫†NG TH√ÅI: CHE KHU·∫§T/L·ªåC (FILTERED) - {details or ''}\n")
                            
                            scan_results["enumerated_ports_details"].append(port_info)

                        except Exception as e:
                            pbar.write(f"\033[91m[üí•] Ngo·∫°i l·ªá khi ph√¢n t√≠ch k·∫øt qu·∫£ c·ªïng {port_num}: {e}\033[0m")
                            scan_results["enumerated_ports_details"].append({"port_number": port_num, "disposition": "ERROR", "diagnostic_details": str(e)})

                        stats_str = get_system_stats()
                        pbar.set_postfix_str(f"{stats_str} | Kh·∫£ d·ª•ng: {len(open_ports_details)}, T·ª´ ch·ªëi: {closed_ports_count}, Che khu·∫•t: {filtered_ports_count}")
                        pbar.update(1)
                        
                        if i % (num_threads // 2 + 1) == 0:
                             sys.stdout.flush()

    except KeyboardInterrupt:
        print("\n\033[91m[üõë] Quy tr√¨nh ThƒÉm d√≤ ƒë√£ b·ªã gi√°n ƒëo·∫°n theo Ch·ªâ th·ªã Ng∆∞·ªùi d√πng.\033[0m")
        if 'executor' in locals() and executor is not None: # Check if executor was defined
            executor.shutdown(wait=False, cancel_futures=True)
    except Exception as e:
        print(f"\n\033[91m[üí•] S·ª± c·ªë H·ªá th·ªëng B·∫•t kh·∫£ kh√°ng ƒë√£ ph√°t sinh: {e}\033[0m")
    finally:
        end_time_scan_process = time.time()
        total_time_scan = end_time_scan_process - start_time_scan_process
        scan_results["scan_completion_timestamp"] = datetime.datetime.now().isoformat()
        scan_results["total_execution_duration_seconds"] = round(total_time_scan, 2)

        print("-" * 70)
        print(f"\033[1m[‚ú®] Ho√†n t·∫•t Chi·∫øn d·ªãch Th·∫©m ƒë·ªãnh C·ªïng D·ªãch v·ª• cho Th·ª±c th·ªÉ {target_ip}!\033[0m")

        if open_ports_details:
            print(f"\033[92m  [üéØ] T·ªïng h·ª£p {len(open_ports_details)} ƒêi·ªÉm Truy c·∫≠p Kh·∫£ d·ª•ng ƒë√£ ƒë∆∞·ª£c X√°c minh:\033[0m")
            for p_info in sorted(open_ports_details, key=lambda x: x['port_number']):
                banner_str = f" (D·ªãch v·ª•/Th√¥ng ƒëi·ªáp: {p_info['service_identification_banner'][:60].replace(chr(10), '; ').replace(chr(13), '')}{'...' if p_info['service_identification_banner'] and len(p_info['service_identification_banner']) > 60 else ''})" if p_info['service_identification_banner'] else ""
                print(f"\033[92m       C·ªïng {p_info['port_number']}{banner_str}\033[0m")
            print(f"\033[92m      Bi√™n b·∫£n Chi ti·∫øt ƒë√£ ƒë∆∞·ª£c L∆∞u tr·ªØ An to√†n t·∫°i: {output_txt_filename} v√† {output_json_filename}\033[0m")
        else:
            print(f"\033[93m  [‚≠ï] Kh√¥ng ph√°t hi·ªán ƒêi·ªÉm Truy c·∫≠p Kh·∫£ d·ª•ng n√†o trong Ph·∫°m vi Kh·∫£o s√°t Hi·ªán h√†nh.\033[0m")

        print(f"\033[91m  [‚õî] Ghi nh·∫≠n {closed_ports_count} C·ªïng D·ªãch v·ª• ph·∫£n h·ªìi T·ª´ ch·ªëi K·∫øt n·ªëi Ch·ªß ƒë·ªông.\033[0m")
        print(f"\033[93m  [üõ°Ô∏è] Ghi nh·∫≠n {filtered_ports_count} C·ªïng D·ªãch v·ª• c√≥ D·∫•u hi·ªáu b·ªã Che khu·∫•t ho·∫∑c Gi·ªõi h·∫°n Truy c·∫≠p.\033[0m")

        print(f"\n    ‚è≥ T·ªïng Th·ªùi gian Ho√†n th√†nh Giao th·ª©c: {total_time_scan:.2f} gi√¢y.")
        print(f"    üíª Tr·∫°ng th√°i T√†i nguy√™n H·ªá th·ªëng khi K·∫øt th√∫c: {get_system_stats()}")
        
        try:
            with open(output_json_filename, "w", encoding="utf-8") as f_json:
                json.dump(scan_results, f_json, indent=4, ensure_ascii=False)
        except Exception as e:
            print(f"\033[91m[‚ùóÔ∏è] L·ªói khi l∆∞u tr·ªØ bi√™n b·∫£n JSON: {e}\033[0m")
        
        print("-" * 70)
        return scan_results


if __name__ == "__main__":
    if os.name == 'nt':
        os.system('color')
    
    display_intro_animation() # Hi·ªáu ·ª©ng intro
    display_banner()
    
    while True:
        target_input_str = input(f"\033[96m[‚ùì] K√≠nh m·ªùi Qu√Ω v·ªã cung c·∫•p ƒê·ªãnh danh M·∫°ng (ƒê·ªãa ch·ªâ IP ho·∫∑c T√™n mi·ªÅn) c·ªßa Th·ª±c th·ªÉ M·ª•c ti√™u (ho·∫∑c nh·∫≠p 'q' ƒë·ªÉ ho√†n t·∫•t phi√™n l√†m vi·ªác):\n‚îî‚îÄ‚îÄ‚îÄ‚ñ∫ \033[0m").strip()
        if target_input_str.lower() == 'q':
            print("\033[93m[üëã] Tr√¢n tr·ªçng ghi nh·∫≠n s·ª± h·ª£p t√°c c·ªßa Qu√Ω v·ªã. K√≠nh ch√∫c m·ªôt ng√†y t·ªët l√†nh!\033[0m")
            break
        if not target_input_str:
            print("\033[91m[‚ö†Ô∏è] Y√™u c·∫ßu ƒê·ªãnh danh M·∫°ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng. Xin vui l√≤ng cung c·∫•p th√¥ng tin c·∫ßn thi·∫øt.\033[0m")
            continue
        
        resolved_ip = None
        try:
            print(f"\033[1;34m[i] ƒêang ti·∫øn h√†nh Ph√¢n gi·∫£i Cao c·∫•p cho ƒê·ªãnh danh '{target_input_str}'...\033[0m")
            resolved_ip = socket.gethostbyname(target_input_str)
            if resolved_ip != target_input_str:
                 print(f"\033[94m[üîó] ƒê·ªãnh danh '{target_input_str}' ƒë√£ ƒë∆∞·ª£c √Ånh x·∫° Th√†nh c√¥ng sang ƒê·ªãa ch·ªâ IP: {resolved_ip}\033[0m")
            else:
                 print(f"\033[94m[üîó] ƒê·ªãa ch·ªâ IP '{resolved_ip}' ƒë√£ ƒë∆∞·ª£c X√°c th·ª±c l√† H·ª£p l·ªá.\033[0m")
        except socket.gaierror:
            print(f"\033[91m[‚ùå] ƒê·ªãnh danh M·∫°ng '{target_input_str}' kh√¥ng th·ªÉ Ph√¢n gi·∫£i ho·∫∑c kh√¥ng H·ª£p l·ªá.\033[0m")
            continue
        except Exception as e:
            print(f"\033[91m[üí•] Ngo·∫°i l·ªá H·ªá th·ªëng trong Qu√° tr√¨nh Ph√¢n gi·∫£i '{target_input_str}': {e}\033[0m")
            continue

        if resolved_ip:
            get_ip_info(resolved_ip)
            
            scan_options = {
                "target_ip": resolved_ip,
                "start_port": 1,
                "end_port": DEFAULT_MAX_PORT,
                "scan_type": "TCP_CONNECT",
                "timeout": DEFAULT_TIMEOUT_SOCKET,
                "num_threads": DEFAULT_MAX_THREADS
            }
            
            print(f"\033[1;33m[!] H·ªá th·ªëng s·∫Ω ti·∫øn h√†nh qu√©t v·ªõi c√°c tham s·ªë m·∫∑c ƒë·ªãnh. ƒê·ªÉ t√πy ch·ªânh n√¢ng cao, vui l√≤ng tham kh·∫£o t√†i li·ªáu ho·∫∑c c√°c phi√™n b·∫£n t∆∞∆°ng lai.\033[0m")
            port_scanner(**scan_options)
        
        print("-" * 70)